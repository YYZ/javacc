/* Generated By:JavaCC: Do not edit this line. SLPTokeniser.java */
public class SLPTokeniser implements SLPTokeniserConstants {
        public static void main(String args[]){
                SLPTokeniser tokeniser;
                if (args.length == 0){
                        System.out.println("Reading from standard input . . .");
                        tokeniser = new SLPTokeniser(System.in);
                }
                else if (args.length == 1) {
                        try{
                                tokeniser = new SLPTokeniser(new java.io.FileInputStream(args[0]));
                        }
                        catch (java.io.FileNotFoundException e){
                                System.err.println("File " + args[0] + " not found.");
                                return;
                        }
                }
                else {
                        System.out.println("SLP Tokeniser: Usage is one of:");
                        System.out.println(" java SLPTokeniser < inputfile");
                        System.out.println("OR");
                        System.out.println(" java SLPTokeniser inputfile");
                        return;
                }
/*
* We've now initialised the tokeniser to read from the appropriate place,
* so just keep reading tokens and printing them until we hit EOF
*/
                for (Token t = getNextToken(); t.kind!=EOF; t = getNextToken()) {
                // Print out the actual text for the constants, identifiers etc.
                        if (t.kind==NUM){
                                System.out.print("Number");
                                System.out.print("("+t.image+") ");
                        }
                        else if (t.kind==ID){
                                System.out.print("Identifier");
                                System.out.print("("+t.image+") ");
                        }
                        else if (t.kind==STRING){
                                System.out.print("String");
                                System.out.print("("+t.image+") ");
                        }
                        else
                                System.out.print(t.image+" ");
                }
        }

//Grammar starts here
  static final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      decl();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBR:
      case BOOL:
      case INT:
      case REAL:
      case STR:
      case VOID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      function();
    }
    main_prog();
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      var_decl();
      break;
    case CONST:
      const_decl();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
    jj_consume_token(VAR);
    ident_list();
    jj_consume_token(COLON);
    type();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      ident_list();
      jj_consume_token(COLON);
      type();
    }
    jj_consume_token(SEMIC);
  }

  static final public void const_decl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(ID);
    jj_consume_token(COLON);
    type() = expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
      jj_consume_token(COLON);
      type() = expression();
    }
    jj_consume_token(SEMIC);
  }

  static final public void function() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
    case INT:
    case REAL:
    case STR:
    case VOID:
      type();
      jj_consume_token(ID);
      jj_consume_token(LBR);
      param_list();
      jj_consume_token(RBR);
      jj_consume_token(LCBR);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONST:
        case VAR:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        decl();
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMIC:
        case LCBR:
        case EXLM:
        case QUESTION:
        case IF:
        case WHILE:
        case ID:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        statement();
        jj_consume_token(SEMIC);
      }
      jj_consume_token(RETURN);
      jj_consume_token(LBR);
      expression();
      break;
    case RBR:

      jj_consume_token(RBR);
      jj_consume_token(SEMIC);
      jj_consume_token(RCBR);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void param_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      jj_consume_token(COLON);
      type();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
        jj_consume_token(COLON);
        type();
      }
      break;
    default:
      jj_la1[9] = jj_gen;

    }
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case STR:
      jj_consume_token(STR);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void main_prog() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(LCBR);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
      case VAR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      decl();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMIC:
      case LCBR:
      case EXLM:
      case QUESTION:
      case IF:
      case WHILE:
      case ID:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      statement();
      jj_consume_token(SEMIC);
    }
    jj_consume_token(RCBR);
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      expression();
      break;
      jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      jj_consume_token(STR);
      break;
    case EXLM:
      jj_consume_token(EXLM);
      expression();
      break;
    case QUESTION:
      jj_consume_token(QUESTION);
      jj_consume_token(ID);
      break;
      jj_consume_token(ID);
      jj_consume_token(LBR);
      arg_list();
      jj_consume_token(RBR);
      break;
    case LCBR:
      jj_consume_token(LCBR);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMIC:
        case LCBR:
        case EXLM:
        case QUESTION:
        case IF:
        case WHILE:
        case ID:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_10;
        }
        statement();
        jj_consume_token(SEMIC);
      }
      jj_consume_token(RCBR);
      break;
    case IF:
      jj_consume_token(IF);
      condition();
      jj_consume_token(THEN);
      statement();
      break;
      jj_consume_token(IF);
      condition();
      jj_consume_token(THEN);
      statement();
      jj_consume_token(ELSE);
      statement();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(DO);
      statement();
      break;
    default:
      jj_la1[14] = jj_gen;

    }
  }

  static final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS_SIGN:
      jj_consume_token(PLUS_SIGN);
      break;
    case MINUS_SIGN:
      jj_consume_token(MINUS_SIGN);
      break;
    case MULT_SIGN:
      jj_consume_token(MULT_SIGN);
      break;
    case DIV_SIGN:
      jj_consume_token(DIV_SIGN);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    case PLUS_SIGN:
    case MINUS_SIGN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS_SIGN:
        jj_consume_token(PLUS_SIGN);
        break;
      case MINUS_SIGN:
        jj_consume_token(MINUS_SIGN);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      fragment();
      break;
    case MULT_SIGN:
    case DIV_SIGN:
      expression();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      expression();
      break;
    case PLUS_SIGN:
    case MINUS_SIGN:
    case MULT_SIGN:
    case DIV_SIGN:
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        break;
      case NOT_EQUAL:
        jj_consume_token(NOT_EQUAL);
        break;
      case LEFT_BRACE:
        jj_consume_token(LEFT_BRACE);
        break;
      case RIGHT_BRACE:
        jj_consume_token(RIGHT_BRACE);
        break;
      case LEFT_BRACE_EQUAL:
        jj_consume_token(LEFT_BRACE_EQUAL);
        break;
      case RIGHT_BRACE_EQUAL:
        jj_consume_token(RIGHT_BRACE_EQUAL);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ident_list() throws ParseException {
    jj_consume_token(ID);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      jj_consume_token(ID);
    }
  }

  static final public void arg_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        jj_consume_token(ID);
      }
      break;
    default:
      jj_la1[22] = jj_gen;

    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SLPTokeniserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x8000,0x0,0x10000,0x10000,0x0,0x1c00800,0x8000,0x10000,0x0,0x0,0x0,0x1c00800,0x1c00800,0x1c00000,0x1e0000,0x60000,0x1e0000,0xfc000000,0x1e0000,0x10000,0x10000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x20008,0x45104,0x20008,0x0,0x0,0x20008,0x880080,0x45104,0x0,0x800000,0x45104,0x20008,0x880080,0x880080,0x880080,0x0,0x0,0xa00000,0x802,0x800400,0x0,0x0,0x800000,};
   }

  /** Constructor with InputStream. */
  public SLPTokeniser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SLPTokeniser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SLPTokeniserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SLPTokeniser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SLPTokeniserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SLPTokeniser(SLPTokeniserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SLPTokeniserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
